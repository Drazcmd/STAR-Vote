edited by derrley on Friday September 21, 2007 to reflect the newest state of the art. 

= S-expressions =
We express our language using s-expression constructs. The S-expression is a syntactic form used to express the semantic concept of nested tuples.

Here we give a recursive definition of s-expressions:
 * An s-expression is:
  * ''base case'': an atomic string of bytes
  * ''generative case'': a collection of expressions, prefixed by '(', postfixed by ')', and dileneated by ' '. 
     * If list L is generated by expressions E1, E2, and E3 in the form (E1 E2 E3), E1, E2, and E3 are said to be ''direct subexpressions'' of L.

Example s-expressions:
 * '''kyle'''
 * '''(kyle)''' (1 direct subexpression: kyle)
 * '''(kyle is cool)''' (3 direct subexpressions: {kyle, is, cool})
 * '''((kyle) (is) (cool))''' ( 3 direct subexpressions: {(kyle), (is), (cool)}, 6 total subexpressions: {(kyle), (is), (cool), kyle, is, cool})
 * '''((kyle is cool))''' ( 1 direct subexpression: {(kyle is cool)}, 4 total subexpressions: {(kyle is cool), kyle, is, cool})

== Special Expressions ==

We also explicitly define a finite number of "special" expressions. Special expressions are all, by coincidence, prefixed by the '#' character, but any expression which is not a member of the following set is simply a string whose first character is '#,' and not a special expression.
 * ''#any''
 * ''#string'' 
 * ''#list:E'' (where E is an expression) 
 * ''#wildcard''
 * ''#nothing''
 * ''#nomatch''

== Named Expressions == 

Any expression can also be assigned any string as its "name.":
 * ''%S:E'' is the expression E named by the string S. 

== Match == 

For any two expressions P (pattern) and T (target), P matches T if:
  * P and T are equivalent strings
  * P is #any
  * P is #string and T is any string
  * P is #wildcard, E is any expression, and T is one of {#any, #string, #wildcard, #list:E}.
  * P,T are lists of the same length and every direct subexpression in P matches every corresponding direct subexpression in T.
  * E is any expression, P is #list:E, T is a list, and E matches each direct subexpression in T.
Otherwise, P does not match T. 

We use this conceptual notion of "match" to define the operation match: expression X expression --> expression:

match(P, T) =
  * #nomatch, if P does not match T
  * L, such that L is a list, and if L is not empty:
    * the direct subexpressions of L are subexpressions of T
    * Each subexpression in P that is also a special, wildcard expression matches a unique direct subexpression of L
    * The direct subexpressions of L appear in the same order as if their corresponding wildcard expressions were extracted in an in-order traversal of P.

= Querifier Language =

We use the syntactic power of these s-expressions to define a rules language which querifier knows how to evaluate. For example rules, see [citation needed].

The following are value types for the querifier language. The notation ''<any>'' represents any one of the following:
 * '''expressions''': which are denoted by ''<exp>'', is one of <list> or <string>. These are '''value expressions.'''
 * '''numbers''': denoted ''<num>'', which are the natural numbers.
 * '''sets''': denoted ''<set>'', which are unordered collections of ''<exp>''
 * '''dags''': denoted ''<dag>'', which is a directed, acyclic graph of ''<exp>''. (These can be conveniently used to represent a collection of logs where there is no total ordering.)
 * '''closures''': denoted ''<closure>'', which is a function created by lambda.
 * '''truth-value''': denoted ''<truth-value>'', which is either ''<true>'' or ''<false>''
 * '''reduction''': special kind of truth value -- represents "unknown." More explicitly, it is the AST which must be evaluated to solve the unknown. It is a simplification of some original rule AST, where the process of simplifying involves partial evaluation of the AST.

== Primitive Constructs == 

For each primitive construct, I will give the pattern which a particular instance must match against in order to qualify as an instance of that construct. I use named expressions solely for explanatory purposes. In place of the #any wildcard, I will use angle-bracketed expressions, which (as stated directly previously) denote type. This makes each of the given patterns syntactically incorrect, but because our language does not have explicit type notation, there is no better way to communicate the contract of each primitive construct. The '|' character denotes logical "or" in typing. If a construct's argument is "<string>|<set>", this means its argument can safely evaluate to either a string or a set without producing type errors. 

=== Variables ===
 * '''(let #list:(%identifier:#string %value:<any>) %body:<any>)''' explicitly extends the environment such that each identifier is bound to each value in the scope of the evaluation of the body.
 * '''(let-match %pattern:<exp> %target:<exp> %body:<any> %alt:<any>)''' implicitly extends the environment for the evaluation of body such that each mapping in the result of the named match of pattern on target is in the environment. If the named match succeeds, a let-match evaluates to what body evaluates to. If it fails, it evaluates to what alt evaluates to.

=== Primitive Functions ===
Functions with return type '''<set>''':
 * '''(filter %set:<set> %pattern:<exp>)''' is the subset of ''set'' such that all members of said subset match ''pattern''
 * '''(list->set %list<list>)''' converts list into a set.
 * '''(set->list %set:<set>)''' converts set into a list.

Functions with return type '''<num>''':
 * '''(len %arg:<exp>|<set>|<dag>)''' evaluates to the number of elements in the given collection, or the number of bytes in the given string.
 * '''(string->num %string:<string>)''' evaluates to the numerical value which string represents. String must use only the characters {-,0,1,...,9}

Functions with return type '''<exp>''':
 * '''(quote {expression})''' directly constructs an expression value from its s-expression argument. Literal expressions are defined in this manner.
 * '''(get %n:<num> %list:<list>)''' evaluates to the nth element of list.
 * '''(hash %exp<exp>)''' evaluates to the SHA-1 hash of exp.

Functions with return type '''<closure>''':
 * '''(lambda %variables:#list:#string %body:#any)''' defines %body to be the functoin whose evaluation is closed on the defining environment extended by %variables whose values are given at call time.

Functions with return type '''<truth-value>''':

We include the sentential connectives:
 * '''(not %arg:<truth-value>|<reduction>)''' is true if %arg is false.
 * '''(and %conjuncts:#list:<truth-value>|<reduction>)''' is true if all direct subexpressions of conjuncts evaluate to true.
 * '''(or %disjuncts:#list:<truth-value>|<reduction>)''' is true if at least one direct subexpression of disjuncts evaluates to true.
 * '''(impl %antecedant:<truth-value>|<reduction> %consequent:<truth-value>|<reduction>)''' evaluates to true if either antecedant evaluates to false or consequent evaluates to true.

We include the following predicates:
 * '''(succeeds %left:<exp> %right:<exp> %dag:<dag>)''' is true if all of the following are true:
   * dag contains left
   * dag contains right
   * there is a path from left to right in dag 
   * left and right are not the same expression.
 * '''(< %left:<num> %right:<num>)''' is true if left is less than right. 
 * '''(> %left:<num> %right:<num>)''' is true if left is greater than right.
 * '''(>= %left:<num> %right:<num>)''' is true if left is greater than or equal to right.
 * '''(<= %left:<num> %right:<num>)''' is true if left is less than or equal to right.
 * '''(= %left:<num>|<set>|<sexp>|<truth-value> %right:<num>|<set>|<sexp>|<truth-value>)''' is true if one of the following is true:
  * left and right are equivalent numbers
  * left and right are sets which have the same members
  * left and right are identical strings
  * left and right are lists with the same number of direct subexpressions, and each direct subexpression in left is equivalent to the corresponding direct subexpression in right
  * left and right are both true
  * left and right are both false
(Note that the last two conditions for equality make the "=" operation effectively equivalent to the logical biconditional.)

We include the common first-order quantifiers:
 * '''(exists %var:#string %universe:<set> %body:<truth-value>|<reduction>)''' is true if there is some member of %universe such that when the defining environment is extended in such a way that %var is bound to this value, %body is true. 
 * '''(forall %var:#string %universe:<set> %body:<truth-value>|<reduction>)''' is true if for all members of %universe, when the defining environment is extended in such a way that %var is bound to this value, %body is true.

=== Assertions ===
Assertions denote particular points of interest to the rule writer. Inserting an assertion into a particular piece of code denotes that the writer would like to be notified if the body of the assertion evaluates to false.

 * '''(assert %name:#string %dependencies:#list:#string %body:<any>)''' always evaluates to body, but if body is false, has the side effect of evaluating each variable in dependencies and storing their values in the global list of failed assertions.