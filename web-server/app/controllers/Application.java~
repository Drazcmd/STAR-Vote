package controllers;

import models.CastBallot;
import models.ChallengedBallot;
import play.data.Form;
import play.libs.F.*;
import play.mvc.*;
import views.html.*;

import java.util.StringTokenizer;

import static play.data.Form.form;


public class Application extends Controller {

    //    forms for searching for ballots in DBs
    static Form<ChallengedBallot> challengeForm = form(ChallengedBallot.class);
    static Form<CastBallot> confirmForm = form(CastBallot.class);


    /**
     * Main page
     */
    public static Result index() {
        return ok(index.render());
    }

    /**
     * Page for requesting cast ballot hash lookup
     */
    public static Result confirm() {
        return ok(confirmballot.render(CastBallot.all(), confirmForm, null));
    }

    /**
     * Confirms ballot was cast by looking for hash in cast ballot database
     */
    public static Result getCastBallot() {
        Form<CastBallot> filledForm = confirmForm.bindFromRequest();
//        probably a missing field
        if (filledForm.hasErrors()) {
//            re-prompt user to enter cast ballot hash
            return badRequest(confirmballot.render(CastBallot.all(), confirmForm, "Please enter your ballot hash"));
        } else {
            String hash = filledForm.get().hash;
//            db lookup
            CastBallot ballot = CastBallot.getBallot(hash);
            if (ballot != null) {
                return ok(castballotfound.render(ballot));
            } else {
                return ok(confirmballot.render(CastBallot.all(), confirmForm, "Could not find ballot hash: " + hash));
            }
        }
    }


    /**
     * Page for requesting challenged ballot r-value
     */
    public static Result challenge() {
        return ok(challengeballot.render(ChallengedBallot.all(), challengeForm, null));
    }


    /**
     * Retrieves challenged ballot database entry
     */
    public static Result getChallengedBallot() {
        Form<ChallengedBallot> filledForm = challengeForm.bindFromRequest();
//        probably missing field
        if (filledForm.hasErrors()) {
//            re-prompt user to enter cast ballot hash
            return badRequest(challengeballot.render(ChallengedBallot.all(), challengeForm, "Please enter your ballot hash"));
        } else {
            String hash = filledForm.get().hash;
//            db lookup
            ChallengedBallot ballot = ChallengedBallot.getBallot(hash);
            if (ballot == null) {
                return ok(challengeballot.render(ChallengedBallot.all(), challengeForm, "Could not find ballot hash: " + hash));
            }
            return ok(challengedballotfound.render(ballot));
        }
    }


    /**
     * Socket handling for ballot end-of-election dump/upload from each voting station
     * Parses and stores new cast and challenged ballots
     */
    public static WebSocket<String> ballotDump() {
System.out.println("Connection SUCCESSFUL!");
        return new WebSocket<String>() {
            // Called when the Websocket Handshake is done.
            public void onReady(WebSocket.In<String> in, WebSocket.Out<String> out) {

                // For each event received on the socket,
                in.onMessage(new Callback<String>() {
                    public void invoke(String event) {
                        System.out.println(event);
                        StringTokenizer typeParser = new StringTokenizer(event, ":");
//                        todo: add machine-unique keys/ids to prevent any source from dumping and/or for discarding ballots from unknown sources
//                        todo: make the transfer less hodgepodge and create a protocol
                        String ballotType = typeParser.nextToken();
                        String params = typeParser.nextToken();
                        StringTokenizer paramParser = new StringTokenizer(params, ";");
//                        todo: check for duplicates?
                        if ("cast".equals(ballotType)) {
                            CastBallot.create(new CastBallot(paramParser.nextToken()));
                        } else if ("chall".equals(ballotType)) {
                            ChallengedBallot.create(new ChallengedBallot(paramParser.nextToken(), paramParser.nextToken()));
                        }
                    }
                });

                // When the socket is closed.
                in.onClose(new Callback0() {
                    public void invoke() {
                    }
                });

            }
        };
    }

}
